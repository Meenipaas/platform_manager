// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 枚举所有的状态
enum Status {
  INIT
  PUSH_AGENT
  PUSH_AGENT_FAILED
  PUSH_AGENT_DONE
  DOWNLOAD_AGENT
  DOWNLOAD_FAILED
  INSTALL
  STARTING
  STOPPING
  STOPPED
  UPDATING
  SUCCESS
  FAILED
  RUNNING
  UNINSTALL
  CLEANING
}

enum AgentStatus {
  INIT
  RUNNING
  STOPPED
  FAILED
  WAITING_PUSH
  PUSH_AGENT
  PUSH_AGENT_DONE
  DOWNLOAD_AGENT
  DOWNLOAD_FAILED
  INSTALL
  UPDATING
}

// 虚拟机
model VirtualMachine {
  id                  String               @id @default(cuid())
  hostname            String               @default("")
  ip                  String               @unique() @default("")
  rootPassword        String               @default("") @map("root_password")
  totalMemory         Int                  @default(0) @map("total_memory")
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now())
  virtualMachineDisks VirtualMachineDisk[]
  metrics             Metrics[]
  agent               Agent?               @relation(fields: [agentId], references: [id])
  agentId             String?              @map("agent_id")

  @@map("t_cyber_vm")
}

model VirtualMachineDisk {
  id               String          @id @default(cuid())
  fileSystem       String          @map("file_system")
  size             Int             @default(0)
  mountedOn        String          @default("") @map("mounted_on")
  used             Int             @default(0)
  avail            Int             @default(0)
  created_at       DateTime        @default(now())
  updated_at       DateTime        @default(now())
  VirtualMachine   VirtualMachine? @relation(fields: [virtualMachineId], references: [id])
  virtualMachineId String?         @map("virtual_machine_id")

  @@map("t_cyber_vm_disk")
}

model Metrics {
  id   String   @id @default(cuid())
  time DateTime @default(now())

  metricsCPU         MetricsCPU       @relation(fields: [metricsCPUId], references: [id])
  MetricsMemory      MetricsMemory    @relation(fields: [metricsMemoryId], references: [id])
  metricsBandwidth   MetricsBandwidth @relation(fields: [metricsBandwidthId], references: [id])
  metricsMemoryId    String           @map("metrics_memory_id")
  metricsCPUId       String           @map("metrics_cpu_id")
  metricsBandwidthId String           @map("metrics_bandwith_id")
  VirtualMachine     VirtualMachine?  @relation(fields: [virtualMachineId], references: [id])
  virtualMachineId   String?          @map("metrics_machine_id")

  @@map("t_cyber_metrics")
}

model MetricsCPU {
  id       String    @id @default(cuid())
  cpuUsage Int       @default(0)
  Metrics  Metrics[]

  @@map("t_cyber_metrics_cpu")
}

model MetricsMemory {
  id      String    @id @default(cuid())
  total   Int       @default(0)
  usage   Int       @default(0)
  Metrics Metrics[]

  @@map("t_cyber_metrics_memory")
}

model MetricsBandwidth {
  id      String    @id @default(cuid())
  total   Int       @default(0)
  current Int       @default(0)
  Metrics Metrics[]

  @@map("t_cyber_metrics_bandwith")
}

model Agent {
  id             String           @id @default(cuid())
  manageIp       String           @unique @map("manage_ip")
  status         Status
  homePath       String           @map("home_path")
  clientId       String           @map("client_id")
  clientSecret   String           @map("client_secret")
  platformIp     String           @map("platform_ip")
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  task           Task?            @relation(fields: [task_id], references: [id])
  task_id        String
  VirtualMachine VirtualMachine[]

  @@map("t_cyber_agent")
}

model Task {
  id       String  @id @default(cuid())
  name     String
  status   Status  @default(INIT)
  step     String
  progress Int
  agent    Agent[]
  log      Log[]

  @@map("t_cyber_task")
}

model Log {
  id        String    @id @default(cuid())
  message   String
  create_at DateTime? @default(now())
  task      Task?     @relation(fields: [task_id], references: [id])
  task_id   String?   @map("task_id")

  @@map("t_cyber_log")
}

model User {
  id       String @id @default(cuid())
  username String @unique
  password String

  @@map("t_cyber_user")
}
